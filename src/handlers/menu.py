from aiogram import F, Router, types

from src.keyboards import *
from src.utils import check_who, choose_random_photo, get_about_me

router = Router()


@router.message(F.text == "–†–æ–∑–∫–ª–∞–¥ üìö")
async def schedule(message: types.Message) -> None:
    await message.delete()
    telegram_id = message.from_user.id

    # if not await check_who(message):
    #     await message.answer(text="–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ‚ùóÔ∏è", reply_markup=hide_kb())
    #     return

    await message.answer(
        text="–ü–µ—Ä–µ–≥–ª—è–¥ —Ä–æ–∑–∫–ª–∞–¥—É ‚¨áÔ∏è", reply_markup=await schedule_kb(telegram_id)
    )


@router.callback_query(F.data == "student_back_kb")
async def back_student(query: types.CallbackQuery) -> None:
    telegram_id = query.from_user.id
    await query.message.delete()
    await query.message.answer(
        text="–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è", reply_markup=await schedule_kb(telegram_id)
    )


@router.message(F.text == "–Ü–Ω—à–µ üìå")
@router.callback_query(F.data == "other_inline")
async def others(event: types.Message | types.CallbackQuery) -> None:
    if not isinstance(event, types.Message):
        await event.message.delete()
        await event.message.answer(text="–Ü–Ω—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è ü§Ø", reply_markup=other_kb())
        return

    await event.delete()
    await event.answer(text="–Ü–Ω—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è ü§Ø", reply_markup=other_kb())


@router.message(F.text == "–î–ª—è –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞ üßë‚Äçüíª")
@router.callback_query(F.data == "applicant_inline")
async def for_applicant(event: types.Message | types.CallbackQuery) -> None:
    if not isinstance(event, types.Message):
        await event.message.delete()
        await event.message.answer(
            text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞ üòµ‚Äçüí´", reply_markup=applicant_kb()
        )
        return

    await event.delete()
    await event.answer(
        text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞ üòµ‚Äçüí´", reply_markup=applicant_kb()
    )


@router.callback_query(F.data == "–ü—Ä–æ –±–æ—Ç–∞ üñá")
async def about_bot(query: types.CallbackQuery) -> None:
    about_bot_text = (
        f"ü§ñ –ë–û–¢ –í–ü–§–ö –ü–ï–î–ö–Ü–¢\n"
        f"üÜô –í–µ—Ä—Å—ñ—è : 2.1\n"
        f"üë®‚Äçüíª –†–æ–∑—Ä–æ–±–Ω–∏–∫: <a href='https://t.me/salkooua'>Salo</a>\n"
        f"üé® –î–∏–∑–∞–π–Ω –∞–≤–∏: <a href='https://t.me/pupqwert'>Reloadddddd</a>\n\n"
        f"üìÖ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Ä–æ–±–∫–∏ : –°—ñ—á–µ–Ω—å 2023-–≥–æ —Ä–æ–∫—É\n\n"
        f"–ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è\n"
        f"–≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±—É–¥—å-—è–∫–∏—Ö —Ä–µ—á–µ–π,\n"
        f"–∑–≤'—è–∑–∞–Ω–∏—Ö –∑ –∫–æ–ª–µ–¥–∂–µ–º. –£ –Ω—å–æ–º—É\n"
        f"—î –∫—É–ø–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —ñ –Ω–µ –¥—É–∂–µ\n"
        f"—Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ —Ä–æ–∑—Å—Ç–∞–≤–ª–µ–Ω—ñ –≤\n"
        f"–∑—Ä—É—á–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ\n"
        f"–π–æ–≥–æ –¥–ª—è –∑–µ–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—è —á–∞—Å—É!\n"
        f"üåê <a href='https://vvpc.com.ua/'>–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç –í–ü–§–ö</a>\n"
    )
    await query.message.edit_text(
        about_bot_text, parse_mode="HTML", disable_web_page_preview=True
    )
    await query.message.edit_reply_markup(reply_markup=other_back_kb())


@router.callback_query(F.data == "–ü—Ä–æ –º–µ–Ω–µ üëÄ")
async def about_me(query: types.CallbackQuery) -> None:
    user_id = query.from_user.id
    url = query.from_user.url
    text = await get_about_me(user_id, url)

    await query.message.edit_text(
        text, parse_mode="HTML", disable_web_page_preview=True
    )
    await query.message.edit_reply_markup(reply_markup=other_back_kb())


@router.callback_query(F.data == "–î–æ–ø–æ–º–æ–≥–∞ üõ†")
async def get_help(query: types.CallbackQuery) -> None:
    help_text = "–ü–∏—à—ñ—Ç—å —Å—é–¥–∏ : @botadmincat"
    await query.message.edit_text(help_text)
    await query.message.edit_reply_markup(reply_markup=other_back_kb())


@router.callback_query(F.data == "–ß–∞—Å —Ä–æ–±–æ—Ç–∏ üìÖ")
async def time_work(query: types.CallbackQuery) -> None:
    time_work_text = (
        "–ß–∞—Å —Ä–æ–±–æ—Ç–∏ ‚åöÔ∏è\n"
        "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ - –ü'—è—Ç–Ω–∏—Ü—è: 8:00‚Äì17:00.\n"
        "–°—É–±–æ—Ç–∞ - –ù–µ–¥—ñ–ª—è: –ó–∞—á–∏–Ω–µ–Ω–æ."
    )
    await query.message.edit_text(text=time_work_text)
    await query.message.edit_reply_markup(reply_markup=other_back_kb())


@router.callback_query(F.data == "–§–æ—Ç–æ –∫–æ—Ç–∞ üñº")
async def send_random_cat_photo(query: types.CallbackQuery) -> None:
    await query.message.delete()

    try:
        photo_path = await choose_random_photo()
        file_path = types.FSInputFile(photo_path)
        await query.message.answer_photo(file_path, reply_markup=other_back_kb())
    except Exception:
        await query.message.answer(
            text="–§–æ—Ç–æ –∫–æ—Ç–∞ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ üòø", reply_markup=other_back_kb()
        )


@router.callback_query(F.data == "–î–æ–Ω–∞—Ç ü´°")
async def donate(query: types.CallbackQuery) -> None:
    text = (
        f"–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç –º–æ–∂–Ω–∞ –∑–∞:\n\n"
        f"üí≥ Monobank card : <code>5375411202975004</code>\n"
        f"üí≥ Monobank url : <a href='https://send.monobank.ua/jar/5uzN1NcwYA'>monobank</a>\n\n"
        f"‚ù§Ô∏è –ü–æ–≤–µ—Ä–Ω–∏—Å—å –∂–∏–≤–∏–º : <a href='https://savelife.in.ua/'>—Å–∞–π—Ç</a>\n\n"
        f"–ö–æ—à—Ç–∏ –ø—ñ–¥—É—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É —Ö–æ—Å—Ç–∏–Ω–≥—É —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –±–æ—Ç–∞ üåö"
    )

    await query.message.edit_text(
        text, parse_mode="HTML", disable_web_page_preview=True
    )
    await query.message.edit_reply_markup(reply_markup=url_card_kb())


@router.callback_query(F.data == "–í—Å—Ç—É–ø üìó")
async def introduction(query: types.CallbackQuery) -> None:
    photo_path = "photo/introduction.jpg"
    file_path = types.FSInputFile(photo_path)

    await query.message.delete()
    await query.message.answer_photo(
        photo=file_path,
        caption="<b><code>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –≤—Å—Ç—É–ø–Ω–∏–∫–∞ 2023 üë©‚Äçüéì</code></b>",
        reply_markup=url_introduction_kb(),
        parse_mode="HTML",
    )


@router.callback_query(F.data == "–ü—Ä–æ –∫–æ–ª–µ–¥–∂ üõ°")
async def about_collage(query: types.CallbackQuery) -> None:
    photo_path = "photo/about_collage.jpg"
    file_path = types.FSInputFile(photo_path)
    text = "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –í–æ–ª–æ–¥–∏–º–∏—Ä—Å—å–∫–∏–π\n–ø–µ–¥–∞–≥–æ–≥—ñ—á–Ω–∏–π —Ñ–∞—Ö–æ–≤–∏–π –∫–æ–ª–µ–¥–∂\n—ñ–º–µ–Ω—ñ –ê.–Æ. –ö—Ä–∏–º—Å—å–∫–æ–≥–æ\n–í–æ–ª–∏–Ω—Å—å–∫–æ—ó –æ–±–ª–∞—Å–Ω–æ—ó —Ä–∞–¥–∏"

    await query.message.delete()
    await query.message.answer_photo(
        photo=file_path,
        caption=f"<code><b>{text}</b></code>",
        parse_mode="HTML",
        reply_markup=url_about_college_kb(),
    )


@router.callback_query(F.data == "–ê–¥—Ä–µ—Å–∞ üì´")
async def address(query: types.CallbackQuery) -> None:
    location = (
        "‚Ä¢–ó–µ–º–ª—è üåç\n"
        "‚Ä¢–£–∫—Ä–∞—ó–Ω–∞ üá∫üá¶\n"
        "‚Ä¢–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üåâ\n"
        "‚Ä¢–í–æ–ª–æ–¥–∏–º–∏—Ä 44700 üåÜ\n"
        "‚Ä¢–í—É–ª. –£—Å—Ç–∏–ª—É–∑—å–∫–∞ 42 üõ£"
    )
    await query.message.edit_text(location)
    await query.message.edit_reply_markup(reply_markup=applicant_back_kb())


@router.callback_query(F.data == "–ö–æ–Ω—Ç–∞–∫—Ç–∏ üìò")
async def contact(query: types.CallbackQuery) -> None:
    contacts = (
        "üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏: \n"
        "    - (03342)35555 (—Ñ–∞–∫—Å), \n"
        "    - 20950 (–ø—Ä–∏–π–º–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è)\n\n"
        "üì® –ü–æ—à—Ç–∞ :\n"
        "    - E-mail: post@vvpc.com.ua"
    )
    await query.message.edit_text(text=contacts)
    await query.message.edit_reply_markup(reply_markup=url_contact_kb())


@router.callback_query(F.data == "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ üí≥")
async def score(query: types.CallbackQuery) -> None:
    text = (
        f"‚ùóÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ ‚ùóÔ∏è\n"
        f"–¶–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –∫–Ω–æ–ø–∫–æ—é –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º\n\n"
        f"<b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ–ø–ª–∞—Ç–∏ –∑–∞ –Ω–∞–≤—á–∞–Ω–Ω—è (—Å—Ç–∞–Ω–æ–º –Ω–∞ 15.05.22)</b>\n"
        f"–ë–∞–Ω–∫ –ì–£–î –ö–°–£ –í–æ–ª–∏–Ω—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ\n"
        f"–ö–æ–¥ –Ñ–î–†–ü–û–£ 02125941\n"
        f"–†–∞—Ö—É–Ω–æ–∫: <code>UA368201720314241003201023033</code>\n"
        f"–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É: –ø–ª–∞—Ç–∞ –∑–∞ –Ω–∞–≤—á–∞–Ω–Ω—è\n"
        f"–í–∫–∞–∑–∞—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–µ —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫—É—Ä—Å —Ç–∞ –≥—Ä—É–ø—É\n\n"
        f"<b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ–ø–ª–∞—Ç–∏ –∑–∞ –≥—É—Ä—Ç–æ–∂–∏—Ç–æ–∫ (—Å—Ç–∞–Ω–æ–º –Ω–∞ 15.05.22)</b>\n"
        f"–ë–∞–Ω–∫ –ì–£–î –ö–°–£ –í–æ–ª–∏–Ω—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ\n"
        f"–ö–æ–¥ –Ñ–î–†–ü–û–£ 02125941\n"
        f"–†–∞—Ö—É–Ω–æ–∫: <code>UA378201720314211003202023033</code>\n"
        f"–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É: –ø–ª–∞—Ç–∞ –∑–∞ –≥—É—Ä—Ç–æ–∂–∏—Ç–æ–∫\n"
        f"–í–∫–∞–∑–∞—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–µ —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫—É—Ä—Å —Ç–∞ –≥—Ä—É–ø—É"
    )
    await query.message.edit_text(text=text, parse_mode="HTML")
    await query.message.edit_reply_markup(reply_markup=url_score_kb())


@router.callback_query(F.data == "–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç üåé")
async def official_site(query: types.CallbackQuery) -> None:
    await query.message.edit_text("–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç –í–ü–ö üì∞")
    await query.message.edit_reply_markup(reply_markup=url_official_site_kb())


@router.callback_query(F.data == "–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ üìú")
async def specialty(query: types.CallbackQuery) -> None:
    await query.message.edit_text("–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ üìú –í–ü–§–ö")
    await query.message.edit_reply_markup(reply_markup=url_speciality_kb())
