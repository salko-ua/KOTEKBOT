import aiogram.types
from aiogram import F, Router, types
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from src.keyboards import *
from src.data_base import Database
from src.utils import password_for_admin

router = Router()


class FSMReg(StatesGroup):
    student_reg = State()
    password_reg = State()
    reply_reg = State()


@router.message(F.text == "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è üìù")
@router.message(F.text == "–°—Ç—É–¥–µ–Ω—Ç üë®‚Äçüéì")
@router.message(F.text == "–ü–∞–Ω–µ–ª—å üìÅ")
# ===========================–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚öôÔ∏è============================
async def registration(message: types.Message, state: FSMContext) -> None:
    db = await Database.setup()
    await message.delete()

    if await db.student_exists(message.from_user.id):
        await message.answer(text="–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è", reply_markup=student_kb())

    elif await db.admin_exists(message.from_user.id):
        await message.answer(text="–û–±–µ—Ä—ñ—Ç—å ‚¨áÔ∏è", reply_markup=reg_choice_kb())
        await state.set_state(FSMReg.reply_reg)

    else:
        await message.answer(text="–û–±–µ—Ä—ñ—Ç—å ‚¨áÔ∏è", reply_markup=reg_choice_kb())
        await state.set_state(FSMReg.reply_reg)


@router.callback_query(FSMReg.reply_reg)
async def reg(query: types.CallbackQuery, state: FSMContext) -> None:
    await state.update_data(id=query.message.message_id)

    if query.data == "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä üîê":
        await state.set_state(FSMReg.password_reg)
        await query.message.edit_text("üîí –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å üîë")

    elif query.data == "–°—Ç—É–¥–µ–Ω—Ç üë©‚Äçüéì":
        await state.set_state(FSMReg.student_reg)
        message = await query.message.edit_text(
            "‚¨áÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É", reply_markup=await student_group_list_kb()
        )
        await state.update_data(message=message)


@router.message(FSMReg.password_reg)
async def reg_admin(message: types.Message, state: FSMContext) -> None:
    db = await Database.setup()
    data = await state.get_data()
    message_id = data["id"]

    username = message.from_user.username
    user_id = message.from_user.id
    chat_id = message.chat.id

    await message.delete()
    await message.bot.delete_message(message_id=message_id, chat_id=chat_id)

    if not message.text == password_for_admin():
        await message.answer(text="–ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π ‚òπÔ∏è")
        await state.clear()
        return

    if not await db.admin_exists(message.from_user.id):
        await db.add_admin(user_id, username)
        await message.answer(
            text="–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=start_admin_kb()
        )
        await state.clear()
        return

    await message.answer(text="–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–¥–º—ñ–Ω–æ–º ‚úÖ", reply_markup=hide_kb())
    await state.clear()


@router.callback_query(FSMReg.student_reg)
async def reg_student(query: types.CallbackQuery, state: FSMContext) -> None:
    db = await Database.setup()
    data = await state.get_data()
    message_id: aiogram.methods.edit_message_text.EditMessageText = data["message"]
    group_student = query.data

    await state.clear()

    if query.data == "–ù–∞–∑–∞–¥":
        await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å ‚¨áÔ∏è")
        await query.message.edit_reply_markup(reply_markup=reg_choice_kb())
        await state.set_state(FSMReg.reply_reg)
        return

    if not await db.student_group_exists(group_student):
        await query.message.bot.delete_message(
            chat_id=query.message.chat.id, message_id=message_id.message_id
        )
        await query.answer(
            text=f"–ì—Ä—É–ø—É {group_student} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            show_alert=True,
            reply_markup=start_student_kb(),
        )
        return

    await db.add_student(user_id=query.from_user.id, group_student=group_student)
    await query.message.answer(
        text="‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=start_student_kb()
    )
    await query.message.delete()
