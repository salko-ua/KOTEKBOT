import asyncio
import datetime

import asyncache
import cachetools

from create_bot import alerts_client, bot, scheduler
from data_base import Database


# =========================== –¢—Ä–∏–≤–æ–≥–∞ ===========================
@asyncache.cached(cachetools.TTLCache(1, 20))
async def alert_func():
    delta = datetime.timedelta(hours=2, minutes=0)
    todays = datetime.datetime.now(datetime.timezone.utc) + delta
    hours = todays.strftime("%H")
    minut = todays.strftime("%M")
    second = todays.strftime("%S")

    # –î–æ—Å—Ç–∞—é —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π —É —è–∫–∏—Ö –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ —Ç–∏–ø—É air_raid
    active_alerts = await alerts_client.get_active_alerts()
    filtered_alerts = active_alerts.filter(
        "location_type", "oblast", "alert_type", "air_raid"
    )

    # –î–æ—Å—Ç–∞—é —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –æ–±–ª–∞—Å—Ç–µ–π —É —è–∫–∏—Ö –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞
    count = len(filtered_alerts)
    all_alerts = f"üåç –û–±–ª–∞—Å—Ç—ñ –∑ —Ç—Ä–∏–≤–æ–≥–æ—é({count} –∑ 26):\n–û–Ω–æ–≤–ª–µ–Ω–æ : {int(hours)+1}:{minut}:{second}\n\n"
    list_alerts_oblast_title = []
    for title in filtered_alerts:
        list_alerts_oblast_title.append(title.location_title)
    list_alerts_oblast_title.sort()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —É –í–æ–ª–∏–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–æ–≥–∞?
    if "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å" in list_alerts_oblast_title:
        our_oblast = True
    else:
        our_oblast = False

    # –û–±–ª–∞—Å—Ç—ñ —è–∫—ñ –±—É–¥—É—Ç—å –Ω–∞ –ø–µ—Ä—à–æ–º—É –º—ñ—Å—Ü—ñ
    need_oblast_title = [
        "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    ]
    # —Å–ø–∏—Å–æ–∫ —É —è–∫–æ–º—É –±—É–¥—É—Ç—å –æ–±–ª–∞—Å—Ç—ñ —è–∫—ñ –Ω–∞–º –ø—ñ–¥—Ö–æ–¥—è—Ç—å –∑–∞ —Å–ø–∏—Å–∫–æ–º –≤–∏—â–µ —ñ —É –Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥–∞
    need_oblast_title_list_new = []
    # –¶–∏–∫–ª –ø–µ–æ–µ–≤—ñ—Ä–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É
    for j in range(0, len(need_oblast_title)):
        try:
            list_alerts_oblast_title.index(need_oblast_title[j])
            list_alerts_oblast_title.remove(need_oblast_title[j])
            need_oblast_title_list_new.insert(0, need_oblast_title[j])
        except ValueError:
            await asyncio.sleep(0.05)
    # –†–æ–±–ª—é –≥–∞—Ä–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if len(need_oblast_title_list_new) == 0 and len(list_alerts_oblast_title) == 0:
        all_alerts += f" - –¢—Ä–∏–≤–æ–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ üü¢\n"
    else:
        if len(need_oblast_title_list_new) == 0:
            all_alerts += f"–ó–∞—Ö—ñ–¥–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ :\n ‚Ä¢ –ù–µ–º–∞—î\n\n"
        else:
            all_alerts += f"–ó–∞—Ö—ñ–¥–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ :\n"
            for alert in need_oblast_title_list_new:
                all_alerts += " ‚Ä¢ " + alert + "\n"
            all_alerts += "\n"
        if len(list_alerts_oblast_title) == 0:
            all_alerts += f"–Ü–Ω—à—ñ –æ–±–ª–∞—Å—Ç—ñ :\n ‚Ä¢ –ù–µ–º–∞—î"
        else:
            all_alerts += f"–Ü–Ω—à—ñ –æ–±–ª–∞—Å—Ç—ñ :\n"
            for alert in list_alerts_oblast_title:
                all_alerts += " ‚Ä¢ " + alert + "\n"
    print(our_oblast)
    return all_alerts, our_oblast


async def wait_start_alarm():
    db = await Database.setup()

    text, is_active = await alert_func()
    if not is_active:
        return

    scheduler.remove_job("wait_start_alarm")
    scheduler.add_job(wait_finish_alarm, "interval", seconds=20, id="wait_finish_alarm")

    all_user_ids = map(lambda e: e[0], await db.list_id_student_agreed_alert_sql())
    all_teach_ids = map(lambda e: e[0], await db.list_id_teacher_agreed_alert_sql())
    await asyncio.gather(
        *map(send_notification(is_active=is_active, who=False), all_user_ids)
    )
    await asyncio.gather(
        *map(send_notification(is_active=is_active, who=True), all_teach_ids)
    )


async def wait_finish_alarm():
    db = await Database.setup()

    text, is_active = await alert_func()
    if is_active:
        return

    scheduler.remove_job("wait_finish_alarm")
    scheduler.add_job(wait_start_alarm, "interval", seconds=20, id="wait_start_alarm")

    all_user_ids = map(lambda e: e[0], await db.list_id_student_agreed_alert_sql())
    all_teach_ids = map(lambda e: e[0], await db.list_id_teacher_agreed_alert_sql())
    await asyncio.gather(
        *map(send_notification(is_active=is_active, who=False), all_user_ids)
    )
    await asyncio.gather(
        *map(send_notification(is_active=is_active, who=True), all_teach_ids)
    )


def send_notification(is_active: bool, who: bool):
    async def wrapped(user_id: int):
        try:
            if not who:
                await bot.send_sticker(
                    user_id,
                    r"CAACAgIAAxkBAAEI_1hkY5y8yh_-0cKFPQ5Sv2SWlYQaCwACLCUAAvF3IUhe2e30dH6RaC8E"
                    if is_active
                    else r"CAACAgIAAxkBAAEI_1xkY5zsKG4_LdSX-d2oMY994WAHjQACQisAAssEIUhdsPeRZOOUMC8E",
                )

                await bot.send_message(
                    user_id, "–¢—Ä–∏–≤–æ–≥–∞! üî¥" if is_active else "–í—ñ–¥–±—ñ–π! üü¢"
                )
            if who:
                await bot.send_message(
                    user_id, "–¢—Ä–∏–≤–æ–≥–∞! üî¥" if is_active else "–í—ñ–¥–±—ñ–π! üü¢"
                )
        except:
            pass

    return wrapped


async def create_task_alarm():
    scheduler.add_job(wait_start_alarm, "interval", seconds=20, id="wait_start_alarm")
    scheduler.start()
