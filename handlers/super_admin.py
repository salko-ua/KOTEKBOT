# import
import datetime

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from config import SUPER_ADMIN
from create_bot import bot, translator
from data_base import Database
from handlers.reg import password_for_admin

# from import
from keyboards import *

router = Router()


class FSMSuperAdmin(StatesGroup):
    id_student_delete = State()
    id_teachers_delete = State()
    # TEACHERS MANAGMENT
    teachers_add = State()
    teachers_delete = State()
    # GROP MANAGMENT
    curse_group = State()
    curse_group_delete = State()
    curse_group_photo_delete = State()
    # SCHEDULE STUDENTS
    curse_group_rad = State()
    curse_group_rad_photo = State()
    # SCHEDULE TEACHERS
    teachers_rad = State()
    teachers_rad_photo = State()
    # SCHEDULE CALLS
    id_photo = State()


async def is_super_admin(message: types.Message):
    user_id = message.from_user.id
    if user_id in SUPER_ADMIN:
        return True
    else:
        return False


# ===========================–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø============================ss


# –ö–ª–∞–≤—ñ–∞—É—Ä–∞ –≤–ª–∞—Å–Ω–∏–∫–∞
@router.message(Command("sadmin"))
async def super_admin(message: types.Message):
    if not await is_super_admin(message):
        return

    await message.answer("–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–ª–∞—Å–Ω–∏–∫–∞", reply_markup=await super_admin_kb())


# –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞ id
@router.message(F.text == "–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
async def super_admin_delete_user(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await message.answer("–í–≤–µ–¥—ñ—Ç—å ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
    await state.set_state(FSMSuperAdmin.id_student_delete)


@router.message(FSMSuperAdmin.id_student_delete)
async def super_admin_delete_user1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    exits = await db.student_exists_sql(message.text)
    if exits:
        await db.delete_student_sql(message.text)
        await message.answer("–°—Ç—É–¥–µ–Ω—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω–æ")
        await state.clear()
    elif not exits:
        await message.answer("–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID")
        await state.clear()


# –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑–∞ id
@router.message(F.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞")
async def super_admin_delete_teach(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await message.answer("–í–≤–µ–¥—ñ—Ç—å ID –≤–∏–∫–ª–∞–¥–∞—á–∞")
    await state.set_state(FSMSuperAdmin.id_teachers_delete)


@router.message(FSMSuperAdmin.id_teachers_delete)
async def super_admin_delete_teach1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    exits = await db.teacher_exists_sql(message.text)
    if exits:
        await db.delete_teacher_sql(message.text)
        await message.answer("–í–∏–∫–ª–∞–¥–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω–æ")
        await state.clear()
    elif not exits:
        await message.answer("–ù–µ–º–∞—î –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID")
        await state.clear()


@router.message(F.text == "password")
async def password(message: types.Message):
    if not await is_super_admin(message):
        return

    await message.answer(f"PASSWORD : {await password_for_admin()}")


@router.message(F.text == "db")
async def send_file_db(message: types.Message):
    if not await is_super_admin(message):
        return

    file_path = types.FSInputFile("data/database.db")
    await bot.send_document(message.from_user.id, file_path)


# ===========================–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏–∫–ª–∞–¥–∞—á–∞============================
@router.message(F.text == "–≤–∏–∫–ª–∞–¥–∞—á–∞ ‚ùáÔ∏è")
async def add_teachers(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.teachers_add)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª–∏ –í–∏–∫–ª–∞–¥–∞—á–∞\n–ü—Ä–∏–∫–ª–∞–¥ : –ù–∞–∑–∞—Ä–æ–≤ –ê.–ú",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(FSMSuperAdmin.teachers_add)
async def add_teachers1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é", reply_markup=await super_admin_kb())
        await state.clear()
        return

    name = message.text
    if await db.teacher_group_exists_sql(message.text):
        await message.answer("–í—á–∏—Ç–µ–ª—å –≤–∂–µ —ñ—Å–Ω—É—î ‚ùå", reply_markup=await super_admin_kb())
        await state.clear()
        return

    if len(name) >= 15:
        await message.answer(
            "–õ—ñ–º—ñ—Ç 15 —Å–∏–º–≤–æ–ª—ñ–≤ ‚ùå",
            reply_markup=await super_admin_kb(),
        )
        await state.clear()
        return

    await db.add_teacher_group_sql(name)
    await message.answer(
        "–ì—Ä—É–ø—É –¥–ª—è –≤—á–∏—Ç–µ–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ", reply_markup=await super_admin_kb()
    )
    await state.clear()


# ===========================–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞============================
@router.message(F.text == "–≤–∏–∫–ª–∞–¥–∞—á–∞ üóë")
async def delete_teachers(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.teachers_delete)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≤—á–∏—Ç–µ–ª—è ‚¨áÔ∏è", reply_markup=await group_selection_teacher_kb()
    )


@router.message(FSMSuperAdmin.teachers_delete)
async def delete_teachers1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é", reply_markup=await super_admin_kb())
        await state.clear()
        return

    name = message.text
    if not await db.teacher_group_exists_sql(name):
        await message.answer("–ù–µ–º–∞—î –≤–∏–∫–ª–∞–¥–∞—á–∞  ‚ùå", reply_markup=await super_admin_kb())
        await state.clear()
        return

    if len(name) >= 15:
        await message.answer("–Ü–º'—è < 15 –±—É–∫–≤", reply_markup=await super_admin_kb())
        await state.clear()
        return

    if not await db.teacher_for_group_exists_sql(name):
        await db.delete_name_techers_sql(name)
        await message.answer("–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=await super_admin_kb())
        await state.clear()
        return

    await db.delete_name_techers_sql(name)
    await db.delete_teacher_name_sql(name)
    await message.answer("–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=await super_admin_kb())
    await state.clear()


# ===========================–î–æ–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤============================
@router.message(F.text == "–¥–∑–≤—ñ–Ω–∫—ñ–≤ ‚ùáÔ∏è")
async def add_calls(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ", reply_markup=ReplyKeyboardRemove())
    await state.set_state(FSMSuperAdmin.id_photo)


@router.message(F.photo, FSMSuperAdmin.id_photo)
async def add_calls1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    now = datetime.datetime.now()
    now = now.strftime("%d - %B, %A")
    translation = translator.translate(now)

    if not await is_super_admin(message):
        return

    await db.add_photo_sql(
        "calls", message.photo[0].file_id, "–ó–º—ñ–Ω–µ–Ω–Ω–æ: " + translation
    )
    await message.answer(
        "–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=await super_admin_kb()
    )
    await state.clear()


# ===========================–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤============================
@router.message(F.text == "–¥–∑–≤—ñ–Ω–∫—ñ–≤ üóë")
async def delete_calls(message: types.Message):
    db = await Database.setup()
    check = await db.delete_photo_sql("calls")

    if not await is_super_admin(message):
        return

    if not check:
        await message.answer(
            "–†–æ–∑–∫–ª–∞–¥—É –¥–∑–≤—ñ–Ω–∫—ñ–≤ —â–µ –Ω–µ–º–∞—î üî¥", reply_markup=await super_admin_kb()
        )
        return

    await message.answer(
        "–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–æ üóë", reply_markup=await super_admin_kb()
    )


# ===========================–í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É============================
@router.message(F.text == "–≥—Ä—É–ø—É üóë")
async def delete_group(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.curse_group_delete)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É ‚¨áÔ∏è", reply_markup=await group_selection_student_kb()
    )


@router.message(FSMSuperAdmin.curse_group_delete)
async def delete_group1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é", reply_markup=await super_admin_kb())
        await state.clear()
        return

    fullname = message.text
    if not await db.student_group_exists_sql(fullname):
        await message.answer(
            "–ì—Ä—É–ø–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ–º–∞—î", reply_markup=await super_admin_kb()
        )
        await state.clear()
        return

    if len(fullname) >= 3:
        await message.answer("‚ùå –õ—ñ–º—ñ—Ç 3 —Å–∏–º–≤–æ–ª–∏ ", reply_markup=await super_admin_kb())
        await state.clear()
        return

    if not await db.student_in_group_exists_sql(fullname):
        await db.delete_student_group_sql(fullname)
        await message.answer("–ì—Ä—É–ø—É –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=await super_admin_kb())
        await state.clear()
        return

    await db.delete_student_group_sql(fullname)
    await db.delete_student_for_group_sql(fullname)
    await message.answer("–ì—Ä—É–ø—É –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=await super_admin_kb())
    await state.clear()


# ===========================–î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏============================
@router.message(F.text == "–≥—Ä—É–ø—É ‚ùáÔ∏è")
async def add_group(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.curse_group)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É\n–ü—Ä–∏–∫–ª–∞–¥ : 2–¶", reply_markup=ReplyKeyboardRemove()
    )


@router.message(FSMSuperAdmin.curse_group)
async def add_group1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é", reply_markup=await super_admin_kb())
        await state.clear()
        return

    name = message.text
    if await db.student_group_exists_sql(name):
        await message.answer(
            "–ì—Ä—É–ø–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —î", reply_markup=await super_admin_kb()
        )
        await state.clear()
        return

    if len(name) >= 3:
        await message.answer(
            "‚ùå –õ—ñ–º—ñ—Ç 3 —Å–∏–º–≤–æ–ª–∏",
            reply_markup=await super_admin_kb(),
        )
        await state.clear()
        return

    await db.add_student_group_sql(name)
    await message.answer("–ì—Ä—É–ø—É —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ", reply_markup=await super_admin_kb())
    await state.clear()


# ===========================–î–æ–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞–º============================
@router.message(F.text == "–≥—Ä—É–ø—ñ ‚ùáÔ∏è")
async def add_schedule_to_group(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.curse_group_rad_photo)
    await message.answer("–ö–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É", reply_markup=ReplyKeyboardRemove())


@router.message(F.photo, FSMSuperAdmin.curse_group_rad_photo)
async def add_schedule_to_group1(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await state.update_data(curse_group_rad_photo=message.photo[0].file_id)
    await state.set_state(FSMSuperAdmin.curse_group_rad)
    await message.answer(
        "–î–æ —è–∫–æ—ó –≥—Ä—É–ø–∏ –ø—Ä–∏–≤—è–∑–∞—Ç–∏", reply_markup=await group_selection_student_kb()
    )


@router.message(FSMSuperAdmin.curse_group_rad)
async def add_schedule_to_group2(message: types.Message, state: FSMContext):
    db = await Database.setup()
    data = await state.get_data()
    now = datetime.datetime.now()
    now = now.strftime("%d - %B, %A")
    translation = translator.translate(now)

    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞", reply_markup=await super_admin_kb())
        await state.clear()
        return

    if not await db.student_group_exists_sql(message.text):
        await message.answer("–ù–µ–º–∞—î —Ç–∞–∫–æ—ó –≥—Ä—É–ø–∏ ‚ùå", reply_markup=await super_admin_kb())
        await state.clear()
        return

    await db.student_group_photo_update_sql(
        data["curse_group_rad_photo"],
        message.text,
        "–ó–º—ñ–Ω–µ–Ω–Ω–æ: " + translation,
    )
    await message.answer(
        "–†–æ–∑–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=await super_admin_kb()
    )
    await state.clear()


# ===========================–î–æ–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤–∏–∫–ª–∞–¥–∞—á—É============================
@router.message(F.text == "–≤–∏–∫–ª–∞–¥–∞—á—É ‚ùáÔ∏è")
async def add_schedule_to_teacher(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.teachers_rad_photo)
    await message.answer("–ö–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É", reply_markup=ReplyKeyboardRemove())


@router.message(F.photo, FSMSuperAdmin.teachers_rad_photo)
async def add_schedule_to_teacher1(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await state.update_data(teachers_rad_photo=message.photo[0].file_id)
    await state.set_state(FSMSuperAdmin.teachers_rad)
    await message.answer(
        "–î–æ —è–∫–æ—ó –≥—Ä—É–ø–∏ –ø—Ä–∏–≤—è–∑–∞—Ç–∏", reply_markup=await group_selection_teacher_kb()
    )


@router.message(FSMSuperAdmin.teachers_rad)
async def add_schedule_to_teacher2(message: types.Message, state: FSMContext):
    db = await Database.setup()
    data = await state.get_data()
    now = datetime.datetime.now().strftime("%d - %B, %A")
    translation = translator.translate(now)

    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞", reply_markup=await super_admin_kb())
        await state.clear()
        return

    if not await db.teacher_group_exists_sql(message.text):
        await message.answer("–ù–µ–º–∞—î —Ç–∞–∫–æ—ó –≥—Ä—É–ø–∏ ‚ùå", reply_markup=await super_admin_kb())
        await state.clear()
        return

    await db.teacher_group_photo_update_sql(
        data["teachers_rad_photo"], message.text, "–ó–º—ñ–Ω–µ–Ω–Ω–æ: " + translation
    )
    await message.answer(
        "–†–æ–∑–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=await super_admin_kb()
    )
    await state.clear()


@router.message(F.text == "–≥—Ä—É–ø—É üóëüñº")
async def delete_photo_group(message: types.Message, state: FSMContext):
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.curse_group_photo_delete)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É ‚¨áÔ∏è", reply_markup=await group_selection_student_kb()
    )


@router.message(FSMSuperAdmin.curse_group_photo_delete)
async def delete_photo_group1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é", reply_markup=await super_admin_kb())
        await state.clear()
        return

    if not await db.student_group_exists_sql(message.text):
        await message.answer(
            "–ì—Ä—É–ø–∏ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ–º–∞—î", reply_markup=await super_admin_kb()
        )
        await state.clear()
        return

    await db.delete_student_group_photo_sql(message.text)
    await message.answer(
        "–†–æ–∑–∫–ª–∞–¥ –≥—Ä—É–ø—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ", reply_markup=await super_admin_kb()
    )
