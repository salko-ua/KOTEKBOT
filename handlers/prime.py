import asyncio

from aiogram import F, Router, types
from aiogram.filters import Text
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from create_bot import bot
from data_base import Database
from keyboards import *

router = Router()


# =========–ö–ª–∞—Å—Å –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—É=========
class FSMWrite(StatesGroup):
    text = State()
    group = State()
    teach = State()
    message_group = State()
    message_teach = State()


# ======================================================================================
# ============= –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö =============
async def get_user_data(message: types.Message, state: FSMContext):
    db = await Database.setup()
    msg_data = await state.get_data()
    group = msg_data["group"]
    msg_id = msg_data["msg_id"]
    chat_id = msg_data["chat_id"]

    group_user_writer = await db.group_for_student_id_sql(message.from_user.id)
    all_user_their = await db.list_id_student_agreed_write_sql(group)
    all_user_us = await db.list_id_student_agreed_write_sql(group_user_writer)
    await bot.delete_message(chat_id, msg_id)
    await message.delete()
    """
    –ø–æ–≤–µ—Ä—Ç–∞—é 
    –≥—Ä—É–ø—É —è–∫—ñ–π –ø—ñ—à—É—Ç—å
    –≥—Ä—É–ø—É —è–∫–∞ –Ω–∞–ø–∏—Å–∞–ª–∞
    —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –≥—Ä—É–ø—ñ —è–∫—ñ–π –ø–∏—à—É—Ç—å
    —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –≥—Ä—É–ø—ñ —è–∫–∞ –ø–∏—à–µ
    """
    return group, group_user_writer, all_user_us, all_user_their


# ============= —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–ø–∏—Å–∞—Ç–∏ 1 –µ—Ç–∞–ø | –≤–∏–±—ñ—Ä –≥—Ä—É–ø–∏
@router.callback_query(F.data == "–ù–∞–ø–∏—Å–∞—Ç–∏ ‚úâÔ∏è")
async def write(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    if not await db.student_exists_sql(query.from_user.id):
        await query.answer("–§—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏\n–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º ‚ùå")
        return

    if not await db.student_agreed_write_exsists_sql(query.from_user.id):
        text = (
            "–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ü—ñ—î—é —Ñ—É–Ω–∫—Ü—ñ—î—é,\n"
            "–≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è\n"
            '"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—å –≤—ñ–¥ —ñ–Ω—à–∏—Ö –≥—Ä—É–ø ‚úÖ"\n'
            "\n"
            "–î–ª—è —Ü—å–æ–≥–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –º–µ–Ω—é >\n"
            "–Ü–Ω—à–µ üìå/–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öôÔ∏è\n"
            "–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /settings"
        )
        await query.answer(text)
        return

    await query.message.edit_text(
        "–©–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à—ñ–π –≥—Ä—É–ø—ñ\n—Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —ó—ó —ñ–º'—è –Ω–∏–∂—á–µ ‚¨áÔ∏è"
    )
    await query.message.edit_reply_markup(reply_markup=await student_group_list_kb())
    await state.set_state(FSMWrite.group)


# ============= —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–ø–∏—Å–∞—Ç–∏ 2 –µ—Ç–∞–ø | –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@router.callback_query(FSMWrite.group)
async def write_group(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    group = await db.student_group_exists_sql(query.data)

    if query.data == "–ù–∞–∑–∞–¥":
        await state.clear()
        await query.answer("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ ‚úÖ", show_alert=True)
        await query.message.delete()
        await query.message.answer(
            "–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è", reply_markup=await student_kb()
        )
        return

    if not group:
        await state.clear()
        await query.message.delete()
        await query.message.answer(
            "–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ —ñ—Å–Ω—É—î, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup=await student_kb()
        )
        return

    await state.set_state(FSMWrite.message_group)
    await query.message.delete_reply_markup()
    message = await query.message.edit_text(
        f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å :\n ‚Ä¢ –¢–µ–∫—Å—Ç üìù\n ‚Ä¢ –§–æ—Ç–æ üñº\n ‚Ä¢ –í—ñ–¥–µ–æ üìº\n ‚Ä¢ –°—Ç—ñ–∫–µ—Ä üíå\n ‚Ä¢ GIF ü™®",
        reply_markup=await prime_back_kb(),
    )
    await state.update_data(
        group=query.data, msg_id=message.message_id, chat_id=message.chat.id
    )


# ============= —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–ø–∏—Å–∞—Ç–∏ 3 –µ—Ç–∞–ø | –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
# ============= –Ω–∞–¥—Å–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@router.message(FSMWrite.message_group, F.text)
async def write_group_message_text(message: types.Message, state: FSMContext):
    group, group_user_writer, all_user_us, all_user_their = await get_user_data(
        message, state
    )
    text = message.text
    data = None

    if group == group_user_writer:
        all_user_us_ids = map(lambda e: e[0], all_user_us)
        groups = None
        await asyncio.gather(
            *map(send_notification(1, text, data, groups), all_user_us_ids)
        )
        await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=await student_kb())

    else:
        if bool(len(all_user_their)):
            all_user_us_id = map(lambda e: e[0], all_user_us)
            all_user_their_id = map(lambda e: e[0], all_user_their)
            groups = [group, group_user_writer]

            await asyncio.gather(
                *map(send_notification(2, text, data, groups), all_user_us_id)
            )
            await asyncio.gather(
                *map(send_notification(3, text, data, groups), all_user_their_id)
            )

            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=await student_kb())

        elif bool(len(all_user_their)) == False:
            await message.answer(
                f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=await student_kb()
            )
    await state.clear()


# ============= –Ω–∞–¥—Å–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@router.message(FSMWrite.message_group, F.photo)
async def write_group_message_photo(message: types.Message, state: FSMContext):
    group, group_user_writer, all_user_us, all_user_their = await get_user_data(
        message, state
    )
    text = None
    photo = message.photo[0].file_id

    if group == group_user_writer:
        all_user_us_ids = map(lambda e: e[0], all_user_us)
        groups = None
        await asyncio.gather(
            *map(send_notification(4, text, photo, groups), all_user_us_ids)
        )
        await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=await student_kb())

    else:
        if bool(len(all_user_their)):
            all_user_us_id = map(lambda e: e[0], all_user_us)
            all_user_their_id = map(lambda e: e[0], all_user_their)
            groups = [group, group_user_writer]

            await asyncio.gather(
                *map(send_notification(5, text, photo, groups), all_user_us_id)
            )
            await asyncio.gather(
                *map(send_notification(6, text, photo, groups), all_user_their_id)
            )

            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=await student_kb())

        elif bool(len(all_user_their)) == False:
            await message.answer(
                f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=await student_kb
            )
    await state.clear()


# ============= –Ω–∞–¥—Å–ª–∞–Ω–Ω—è —Å—Ç—ñ–∫–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@router.message(FSMWrite.message_group, F.sticker)
async def write_group_message_sticker(message: types.Message, state: FSMContext):
    group, group_user_writer, all_user_us, all_user_their = await get_user_data(
        message, state
    )
    text = None
    sticker = message.sticker.file_id

    if group == group_user_writer:
        all_user_us_ids = map(lambda e: e[0], all_user_us)
        groups = None
        await asyncio.gather(
            *map(send_notification(7, text, sticker, groups), all_user_us_ids)
        )
        await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=await student_kb())

    else:
        if bool(len(all_user_their)):
            all_user_us_id = map(lambda e: e[0], all_user_us)
            all_user_their_id = map(lambda e: e[0], all_user_their)
            groups = [group, group_user_writer]

            await asyncio.gather(
                *map(send_notification(8, text, sticker, groups), all_user_us_id)
            )
            await asyncio.gather(
                *map(send_notification(9, text, sticker, groups), all_user_their_id)
            )

            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=await student_kb())

        elif bool(len(all_user_their)) == False:
            await message.answer(
                f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=await student_kb()
            )
    await state.clear()


# ============= –Ω–∞–¥—Å–ª–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@router.message(FSMWrite.message_group, F.video)
async def write_group_message_video(message: types.Message, state: FSMContext):
    group, group_user_writer, all_user_us, all_user_their = await get_user_data(
        message, state
    )
    text = None
    video = message.video.file_id

    if group == group_user_writer:
        all_user_us_ids = map(lambda e: e[0], all_user_us)
        groups = None
        await asyncio.gather(
            *map(send_notification(10, text, video, groups), all_user_us_ids)
        )
        await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=await student_kb())

    else:
        if bool(len(all_user_their)):
            all_user_us_id = map(lambda e: e[0], all_user_us)
            all_user_their_id = map(lambda e: e[0], all_user_their)
            groups = [group, group_user_writer]

            await asyncio.gather(
                *map(send_notification(11, text, video, groups), all_user_us_id)
            )
            await asyncio.gather(
                *map(send_notification(12, text, video, groups), all_user_their_id)
            )

            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=await student_kb())

        elif bool(len(all_user_their)) == False:
            await message.answer(
                f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=await student_kb()
            )
    await state.clear()


# ============= –Ω–∞–¥—Å–ª–∞–Ω–Ω—è gif –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@router.message(FSMWrite.message_group, F.animation)
async def write_group_message_animation(message: types.Message, state: FSMContext):
    group, group_user_writer, all_user_us, all_user_their = await get_user_data(
        message, state
    )
    text = None
    animation = message.animation.file_id

    if group == group_user_writer:
        all_user_us_ids = map(lambda e: e[0], all_user_us)
        groups = None
        await asyncio.gather(
            *map(send_notification(13, text, animation, groups), all_user_us_ids)
        )
        await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=await student_kb())

    else:
        if bool(len(all_user_their)):
            all_user_us_id = map(lambda e: e[0], all_user_us)
            all_user_their_id = map(lambda e: e[0], all_user_their)
            groups = [group, group_user_writer]

            await asyncio.gather(
                *map(send_notification(14, text, animation, groups), all_user_us_id)
            )
            await asyncio.gather(
                *map(send_notification(15, text, animation, groups), all_user_their_id)
            )

            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=await student_kb())

        elif bool(len(all_user_their)) == False:
            await message.answer(
                f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=await student_kb()
            )
    await state.clear()


# –§—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
def send_notification(what_send: int, text: str, file_id: str, groups: list):
    async def wrapped(user_id: int):
        try:
            # TEXT
            if what_send == 1:
                await bot.send_message(user_id, f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ :\n" + text)
            elif what_send == 2:
                await bot.send_message(user_id, f"–ú–∏ –¥–æ {groups[0]} :\n" + text)
            elif what_send == 3:
                await bot.send_message(user_id, f"{groups[1]} –ø–∏—à–µ :\n" + text)

            # PHOTO
            elif what_send == 4:
                await bot.send_photo(user_id, file_id, caption=f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ :")
            elif what_send == 5:
                await bot.send_photo(user_id, file_id, caption=f"–ú–∏ –¥–æ {groups[0]} :")
            elif what_send == 6:
                await bot.send_photo(
                    user_id, file_id, caption=f"{groups[1]} –Ω–∞–¥—Å–∏–ª–∞—î :"
                )

            # STICKER
            elif what_send == 7:
                await bot.send_message(user_id, f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ :")
                await bot.send_sticker(user_id, file_id)
            elif what_send == 8:
                await bot.send_message(user_id, f"–ú–∏ –¥–æ {groups[0]} :")
                await bot.send_sticker(user_id, file_id)
            elif what_send == 9:
                await bot.send_message(user_id, f"{groups[1]} –Ω–∞–¥—Å–∏–ª–∞—î :")
                await bot.send_sticker(user_id, file_id)

            # VIDEO
            elif what_send == 10:
                await bot.send_video(user_id, file_id, caption=f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ :")
            elif what_send == 11:
                await bot.send_video(user_id, file_id, caption=f"–ú–∏ –¥–æ {groups[0]} :")
            elif what_send == 12:
                await bot.send_video(
                    user_id, file_id, caption=f"{groups[1]} –Ω–∞–¥—Å–∏–ª–∞—î :"
                )

            # ANIMATION
            elif what_send == 13:
                await bot.send_message(user_id, f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ :")
                await bot.send_animation(user_id, file_id)
            elif what_send == 14:
                await bot.send_message(user_id, f"–ú–∏ –¥–æ {groups[0]} :")
                await bot.send_animation(user_id, file_id)
            elif what_send == 15:
                await bot.send_message(user_id, f"{groups[1]} –Ω–∞–¥—Å–∏–ª–∞—î :")
                await bot.send_animation(user_id, file_id)
        except:
            pass

    return wrapped


# ======================================================================================


# ======================================================================================
# ================= –í–Ü–î–ú–Ü–ù–ê –î–Ü–á –∞–±–æ –ü–û–í–ï–†–ù–ï–ù–ù–Ø –ù–ê–ó–ê–î
@router.callback_query(FSMWrite.message_group, Text(text="—ñ–Ω—à–∞"))
async def back_write_group_message(query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text(
        "–©–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à—ñ–π –≥—Ä—É–ø—ñ\n—Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —ó—ó —ñ–º'—è –Ω–∏–∂—á–µ ‚¨áÔ∏è",
        reply_markup=await student_group_list_kb(),
    )
    await state.set_state(FSMWrite.group)
