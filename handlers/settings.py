from aiogram import F, Router, types
from aiogram.filters import Text
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from data_base import Database
from keyboards import *

router = Router()


# =========–ö–ª–∞—Å—Å –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—É=========
class FSMSettings(StatesGroup):
    change_student_group = State()
    change_teacher_group = State()
    change_account_to_student = State()
    change_account_to_teacher = State()


@router.message(F.text == "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öôÔ∏è", F.chat.type == "private")
async def settings(message: types.Message):
    db = await Database.setup()
    user_id = message.from_user.id
    await message.delete()

    if not await db.student_exists_sql(user_id) and not await db.teacher_exists_sql(
        user_id
    ):
        await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! ‚ùå", reply_markup=await hide_kb())
        return

    await message.answer(
        "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç –≤ –±–æ—Ç—ñ:", reply_markup=await settings_inile_kb(user_id)
    )


# –ó–ú–Ü–ù–ê –ê–ö–ê–£–ù–¢–£ =============================================
@router.callback_query(F.data == "change_account")
async def change_account(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    user_id = query.from_user.id

    if await db.student_exists_sql(user_id):
        await query.message.edit_text(
            "–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –≤–∏–∫–ª–∞–¥–∞—á üòé\n‚¨áÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –≤–∏–∫–ª–∞–¥–∞—á–∞",
            reply_markup=await teacher_group_list_kb(),
        )
        await state.set_state(FSMSettings.change_account_to_teacher)
    elif await db.teacher_exists_sql(user_id):
        await query.message.edit_text(
            "–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–º üòé\n‚¨áÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É",
            reply_markup=await student_group_list_kb(),
        )
        await state.set_state(FSMSettings.change_account_to_student)


@router.callback_query(FSMSettings.change_account_to_student)
async def change_account_to_student(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    await query.message.delete()
    group = query.data
    user_id = query.from_user.id

    if await db.student_group_exists_sql(group):
        await db.delete_teacher_sql(user_id)
        await db.add_student_sql(user_id=user_id, group_student=group)
        await query.message.answer(
            "–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=await start_student_kb()
        )
        await query.answer(f"–¢–µ–ø–µ—Ä –≤–∏ —Å—Ç—É–¥–µ–Ω—Ç\n—É –≥—Ä—É–ø—ñ {group}", show_alert=True)
        await query.message.answer(
            "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç –≤ –±–æ—Ç—ñ:",
            reply_markup=await settings_inile_kb(user_id),
        )
        await state.clear()


@router.callback_query(FSMSettings.change_account_to_teacher)
async def change_account_to_teacher(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    await query.message.delete()
    group = query.data
    user_id = query.from_user.id

    if await db.teacher_group_exists_sql(group):
        await db.delete_student_sql(user_id)
        await db.add_teacher_sql(user_id=user_id, group_teacher=group)
        await query.message.answer(
            "–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=await start_teacher_kb()
        )
        await query.answer(f"–¢–µ–ø–µ—Ä –≤–∏ {group}", show_alert=True)
        await query.message.answer(
            "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç –≤ –±–æ—Ç—ñ:",
            reply_markup=await settings_inile_kb(user_id),
        )
        await state.clear()


# –ó–ú–Ü–ù–ê –ì–†–£–ü–ò =============================================
@router.callback_query(Text(text="change_student_group"))
async def change_student_group(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É")
    await query.message.edit_reply_markup(reply_markup=await student_group_list_kb())
    await state.set_state(FSMSettings.change_student_group)


@router.callback_query(FSMSettings.change_student_group)
async def change_student_group1(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    user_id = query.from_user.id

    if query.data == "–ù–∞–∑–∞–¥":
        await state.clear()
        await query.message.delete()
        await query.message.answer(
            "–ó–º—ñ–Ω—É –≥—Ä—É–ø–∏ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ ‚úÖ\n\n–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç –≤ –±–æ—Ç—ñ:",
            reply_markup=await settings_inile_kb(user_id),
        )
        return

    if not await db.student_group_exists_sql(query.data):
        await query.answer(f"–ù–µ —ñ—Å–Ω—É—î –≥—Ä—É–ø–∏ {query.data}", show_alert=True)
        await state.clear()
        return

    await db.update_student_sql(user_id=user_id, group_student=query.data)
    await query.message.delete()
    await query.message.answer(
        "–ì—Ä—É–ø—É –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n\n–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç –≤ –±–æ—Ç—ñ:",
        reply_markup=await settings_inile_kb(user_id),
    )
    await state.clear()


@router.callback_query(Text(text="change_teacher_group"))
async def change_teacher_group(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É")
    await query.message.edit_reply_markup(reply_markup=await teacher_group_list_kb())
    await state.set_state(FSMSettings.change_teacher_group)


@router.callback_query(FSMSettings.change_teacher_group)
async def change_teacher_group1(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    user_id = query.from_user.id

    if query.data == "–ù–∞–∑–∞–¥":
        await state.clear()
        await query.message.delete()
        await query.message.answer(
            "–ó–º—ñ–Ω—É –≥—Ä—É–ø–∏ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ ‚úÖ\n\n–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç –≤ –±–æ—Ç—ñ:",
            reply_markup=await settings_inile_kb(user_id),
        )
        return

    if not await db.teacher_group_exists_sql(query.data):
        await query.answer(f"–ù–µ —ñ—Å–Ω—É—î –≥—Ä—É–ø–∏ {query.data}", show_alert=True)
        await state.clear()
        return

    await db.update_teacher_sql(user_id=user_id, group_teacher=query.data)
    await query.message.delete()
    await query.message.answer(
        "–ì—Ä—É–ø—É –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n\n–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç –≤ –±–æ—Ç—ñ:",
        reply_markup=await settings_inile_kb(user_id),
    )
    await state.clear()


# ===============================================================
@router.callback_query(Text(text="change_news_agreed"))
async def change_news_agreed(query: types.CallbackQuery):
    db = await Database.setup()
    user_id = query.from_user.id

    if await db.student_exists_sql(user_id):
        await db.student_change_news_sql(True, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer("–í–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–Ω–∏", show_alert=True)
        return

    if await db.teacher_exists_sql(user_id):
        await db.teacher_change_news_sql(True, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer("–í–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–Ω–∏", show_alert=True)
        return


@router.callback_query(Text(text="change_write_agreed"))
async def change_write_agreed(query: types.CallbackQuery):
    db = await Database.setup()
    user_id = query.from_user.id

    if await db.student_exists_sql(user_id):
        await db.student_change_write_sql(True, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer(
            "–í–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–∏ –≥—Ä—É–ø", show_alert=True
        )
        return

    if await db.teacher_exists_sql(user_id):
        await db.teacher_change_write_sql(True, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer(
            "–í–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–∏ –≥—Ä—É–ø", show_alert=True
        )
        return


@router.callback_query(Text(text="change_alert_agreed"))
async def change_alert_agreed(query: types.CallbackQuery):
    db = await Database.setup()
    user_id = query.from_user.id

    if await db.student_exists_sql(user_id):
        await db.student_change_alert_sql(True, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer("–í–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏", show_alert=True)
        return

    if await db.teacher_exists_sql(user_id):
        await db.teacher_change_alert_sql(True, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer("–í–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏", show_alert=True)
        return


@router.callback_query(Text(text="change_news_not_agreed"))
async def change_news_not_agreed(query: types.CallbackQuery):
    db = await Database.setup()
    user_id = query.from_user.id

    if await db.student_exists_sql(user_id):
        await db.student_change_news_sql(False, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer("–í–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n–Ω–æ–≤–∏–Ω –≤—ñ–¥ –±–æ—Ç–∞", show_alert=True)
        return

    if await db.teacher_exists_sql(user_id):
        await db.teacher_change_news_sql(False, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer("–í–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n–Ω–æ–≤–∏–Ω –≤—ñ–¥ –±–æ—Ç–∞", show_alert=True)
        return


@router.callback_query(Text(text="change_write_not_agreed"))
async def change_write_not_agreed(query: types.CallbackQuery):
    db = await Database.setup()
    user_id = query.from_user.id

    if await db.student_exists_sql(user_id):
        await db.student_change_write_sql(False, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer(
            "–í–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–∏—Ö –≥—Ä—É–ø", show_alert=True
        )
        return

    if await db.teacher_exists_sql(user_id):
        await db.teacher_change_write_sql(False, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer(
            "–í–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–∏—Ö –≥—Ä—É–ø", show_alert=True
        )
        return


@router.callback_query(Text(text="change_alert_not_agreed"))
async def change_alert_not_agreed(query: types.CallbackQuery):
    db = await Database.setup()
    user_id = query.from_user.id

    if await db.student_exists_sql(user_id):
        await db.student_change_alert_sql(False, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer(
            "–í–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏", show_alert=True
        )
        return

    if await db.teacher_exists_sql(user_id):
        await db.teacher_change_alert_sql(False, user_id)
        await query.message.edit_reply_markup(
            reply_markup=await settings_inile_kb(user_id)
        )
        await query.answer(
            "–í–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ\n—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏", show_alert=True
        )
        return
