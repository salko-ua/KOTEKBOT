import datetime

from aiogram import F, Router, types
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from create_bot import bot
from data_base import Database
from handlers.menu import menu
from keyboards import *
from task.alarm import alert_func

router = Router()


class FSMStudent(StatesGroup):
    name_gpoup = State()


# ===========================–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥============================
@router.callback_query(F.data == "–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä üëÄ")  # registration router
async def view_coupes_student(query: types.CallbackQuery):
    db = await Database.setup()
    if not await db.student_exists_sql(query.from_user.id):
        await query.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ ‚ùå", show_alert=True)
        return

    boolen, photo, date = await db.see_rod_sql(query.from_user.id)

    if not boolen:
        await query.answer("–†–æ–∑–∫–ª–∞–¥—É —â–µ –Ω–µ–º–∞—î ‚òπÔ∏è", show_alert=True)
        return

    await query.message.delete()
    await query.message.answer_photo(
        photo=photo, caption=date, reply_markup=await user_back_kb()
    )


# ===========================–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤============================
@router.callback_query(F.data == "–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ ‚åöÔ∏è")  # registration router
async def view_calls_student(query: types.CallbackQuery):
    db = await Database.setup()

    check, value, date = await db.see_photo_sql("calls")

    if not check:
        await query.answer("–î–∑–≤—ñ–Ω–∫–∏ —â–µ –Ω–µ–º–∞—î ‚òπÔ∏è", show_alert=True)
        return

    await query.message.delete()
    await query.message.answer_photo(value, date, reply_markup=await user_back_kb())


# ===========================–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É============================
@router.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É üö´")  # registration router
async def delete_user_student(message: types.Message):
    db = await Database.setup()
    if not await db.student_exists_sql(message.from_user.id):
        await message.answer("‚ùóÔ∏è–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ‚ùóÔ∏è")
        return

    if not await db.admin_exists_sql(message.from_user.id):
        await db.delete_student_sql(message.from_user.id)
        await message.answer("–¢–µ–ø–µ—Ä –≤–∏ –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç ‚úÖ", reply_markup=await start_all_kb())
        return

    await db.delete_student_sql(message.from_user.id)
    await message.answer("–¢–µ–ø–µ—Ä –≤–∏ –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç ‚úÖ", reply_markup=await start_admin_kb())


# =========================== –î—Ä—ñ–± ===========================
@router.callback_query(F.data == "–ß/–ó —Ç–∏–∂–¥–µ–Ω—å ‚úèÔ∏è")
async def fraction_student(query: types.CallbackQuery):
    delta = datetime.timedelta(hours=2, minutes=0)
    todays = datetime.datetime.now(datetime.timezone.utc) + delta
    days = int(todays.strftime("%d"))
    years = int(todays.strftime("%y"))
    mouth = int(todays.strftime("%m"))
    today = datetime.date(year=years, month=mouth, day=days)
    week_number = today.isocalendar()[1]
    if week_number % 2 != 0:
        await query.answer("–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å - –∑–Ω–∞–º–µ–Ω–Ω–∏–∫ ü´°", show_alert=True)
    elif week_number % 2 == 0:
        await query.answer("–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å - —á–∏—Å–µ–ª—å–Ω–∏–∫ ü´°", show_alert=True)


# =========================== –¢—Ä–∏–≤–æ–≥–∞ ===========================
@router.callback_query(F.data == "–¢—Ä–∏–≤–æ–≥–∏ ‚ö†Ô∏è")
async def alert(query: types.CallbackQuery):
    await query.message.delete()

    all_alerts, check = await alert_func()

    text = f"{all_alerts}\n" "<a href='https://alerts.in.ua/'>–î–∞–Ω—ñ –∑ —Å–∞–π—Ç—É</a>"

    await query.message.answer(
        text=text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=await reg_back_kb(),
    )


@router.callback_query(F.data == "–†–æ–∑–∫–ª–∞–¥ —Å—Ç—É–¥. üßë‚Äçüéì")
async def schedule_student(query: types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMStudent.name_gpoup)
    await query.message.delete()
    await query.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞", reply_markup=await student_group_list_kb()
    )


@router.callback_query(FSMStudent.name_gpoup)
async def schedule_student1(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    await query.message.edit_reply_markup()

    if query.data == "–ù–∞–∑–∞–¥":
        await query.message.delete()
        await query.message.answer(
            "–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è", reply_markup=await schedule_kb(query.from_user.id)
        )
        await state.clear()
        return

    boolen, photo, date = await db.see_schedule_student_sql(query.data)

    if not boolen:
        await query.answer(f"–£ –≥—Ä—É–ø–∏ {query.data} –Ω–µ–º–∞—î —Ä–æ–∑–∫–ª–∞–¥—É‚òπÔ∏è", show_alert=True)
        await query.message.delete()
        await query.message.answer(
            "–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è", reply_markup=await schedule_kb(query.from_user.id)
        )
        await state.clear()
        return

    await query.message.delete()
    await query.message.answer_photo(
        photo=photo, caption=date, reply_markup=await user_back_kb()
    )


# ===========================–ü—É—Å—Ç–∏–π —Ö–µ–Ω–¥–ª–µ—Ä============================
@router.message()
async def all_text(message: types.Message):
    print(message.content_type)
    if message.text == "–ú–µ–Ω—é üë•":
        await menu(message)
    else:
        if message.content_type == "document":
            await bot.send_document(2138964363, document=message.document.file_id)
